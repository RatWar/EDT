
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтореИд = Формат(ЭтотОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[1].Значение.СтореИд, "ЧГ=0");
	Если ЭтотОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[2].Использование Тогда
		ПлэсеИд = Формат(ЭтотОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[2].Значение.ПлэсеИд, "ЧГ=0");
	Иначе
		ПлэсеИд = 0;
	КонецЕсли;      	
	БюджетИд = Формат(ЭтотОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[3].Значение.БюджетИд, "ЧГ=0");
	ЕдиницыКоличества = ЭтотОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[4].Значение;
	СтрокаЗапроса = ТекстЗапроса(СтореИд, ПлэсеИд, БюджетИд, ЕдиницыКоличества);
	ТЗ = ОИМЦ_Данные.ЗапросДанных63(СтрокаЗапроса);	
	Если ТЗ <> Неопределено Тогда
		Настройки = КомпоновщикНастроек.ПолучитьНастройки(); 
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных; 
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;	
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);	
		ВнешнийНаборДанных = Новый Структура("ВнешняяТаблица", ТЗ); //Внешний набор данных записываем в структуру, где ключ = имени внешнего набора данных в СКД 
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных; 
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешнийНаборДанных, ДанныеРасшифровки); //Устанавливаем в СКД внешний набор данных
		ДокументРезультат.Очистить();
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент; 
		ПроцессорВывода.УстановитьДокумент(ДокументРезультат); 
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	
	КонецЕсли;
КонецПроцедуры

Функция ТекстЗапроса(СтореИд, ПлэсеИд, БюджетИд, ЕИ)
	СтрокаЗапроса = "select
	|    r.""drugID"" as drugid,
	|    r.""nomID"" as nomid,
	|    r.""storeID"" as storeid,
	|    r.""placeID"" as placeid,
	|    r.""budgetID"" as budgetid,
	|    sum(r.amount) / (public.get_koef_by_nomid(r.""nomID"", %4)) as amount,
	|    public.get_edizmer_by_nomid(r.""nomID"", %4) as edizmer,
	|    d.name as lsname,
	|    case when ((d.mnn is null) or (d.mnn = '')) 
	|        then '~'
	|        else d.mnn
	|    end as mnn
	| from
	|    ""hndbkDrug"".drug d
	| join (
	|    select
	|        r1.*
	|    from
	|        ""movementDrug"".remains__new r1
	|    left join documents.doc d2 on d2.id = r1.""seriesID""
	|    left join drug.rejectdrugs rd on rd.""serUUID"" = d2.uuid
	|    where
	|        r1.amount > 0
	|        and rd.id is null
	|        and r1.""storeID"" = %1
	|        and r1.""placeID"" = %2
	|        and r1.""budgetID"" = %3
	|        and substring( d2.body from position('<ГоденДо>' in d2.body) + 9 for ( position('</ГоденДо>' in d2.body) - position('<ГоденДо>' in d2.body) - 9 ) ) :: timestamp > now() :: timestamp 
	|	   ) r on r.""drugID"" = d.code
	| left join ""hndbkDrug"".units un on d.""idUnitBase"" = un.id
	| left join ""hndbkDrug"".sp_lf sp on d.""idSPLF"" = sp.id
	| left join documents.doc d1 on r.""budgetID"" = d1.id
	| left join documents.doc d2 on r.""storeID"" = d2.id
	| where
	|    upper( trim( both ' ' from d.name ) ) like '%'
	| group by
	|    r.""drugID"",
	|    r.""nomID"",
	|    sp.""nameSPLF"",
	|    r.""storeID"",
	|    d2.description,
	|    r.""placeID"",
	|    un.name,
	|    r.""budgetID"",
	|    d1.description,
	|    (case when ((d.mnn is null) or (d.mnn = '')) 
	|        then '~'
	|        else d.mnn
	|    end ),
	|    d.name
	| having
	|    sum(r.amount) > 0
	| order by
	|    lsname;";
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаЗапроса, СтореИд, ПлэсеИд, БюджетИд, ЕИ);
КонецФункции
 